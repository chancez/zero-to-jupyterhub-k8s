apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    {{- include "jupyterhub.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "jupyterhub.matchLabels" . | nindent 6 }}
  strategy:
    {{- .Values.hub.deploymentStrategy | toYaml | trimSuffix "\n" | nindent 4 }}
  template:
    metadata:
      labels:
        {{- /* Changes here will cause the Deployment to restart the pods. */}}
        {{- include "jupyterhub.matchLabels" . | nindent 8 }}
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
        {{- if .Values.hub.labels }}
        {{- .Values.hub.labels | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
      annotations:
        # This lets us autorestart when the secret changes!
        checksum/config-map: {{ include (print .Template.BasePath "/hub/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print .Template.BasePath "/hub/secret.yaml") . | sha256sum }}
        {{- if .Values.hub.annotations }}
        {{- .Values.hub.annotations | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.scheduling.podPriority.enabled }}
      priorityClassName: {{ .Release.Name }}-default-priority
      {{- end }}
      nodeSelector: {{ toJson .Values.hub.nodeSelector }}
      {{- include "jupyterhub.coreAffinity" . | nindent 6 }}
      volumes:
        - name: config
          configMap:
            name: hub-config
        - name: secret
          secret:
            {{- if .Values.hub.existingSecret }}
            secretName: {{ .Values.hub.existingSecret }}
            {{- else }}
            secretName: hub-secret
            {{- end }}
        {{- if .Values.hub.extraVolumes }}
        {{- .Values.hub.extraVolumes | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
        {{- if eq .Values.hub.db.type "sqlite-pvc" }}
        - name: hub-db-dir
          persistentVolumeClaim:
            claimName: hub-db-dir
        {{- end }}
        {{- if .Values.hub.https.enabled }}
        - name: hub-internal-ssl
          persistentVolumeClaim:
            claimName: hub-internal-ssl
        {{- end }}
      {{- if .Values.rbac.enabled }}
      serviceAccountName: hub
      {{- end }}
      securityContext:
        fsGroup: {{ .Values.hub.fsGid }}
      {{- if or .Values.hub.imagePullSecret.enabled .Values.hub.image.pullSecrets }}
      imagePullSecrets:
        {{- if .Values.hub.imagePullSecret.enabled }}
        - name: hub-image-credentials
        {{ else }}
        {{- range .Values.hub.image.pullSecrets }}
        - name: {{ . }}
        {{- end }}
        {{- end }}
      {{- end }}
      {{- if or .Values.hub.initContainers .Values.hub.https.enabled }}
      initContainers:
        {{- if .Values.hub.https.enabled }}
        - name: init-tls
          image: {{ .Values.hub.image.name }}:{{ .Values.hub.image.tag }}
          command:
            - "/bin/sh"
            - "-ec"
            - |
              jupyterhub -f /etc/jupyterhub/jupyterhub_config.py --generate-certs
              cd /srv/jupyterhub-internal-ssl/internal-ssl/
              kubectl create secret generic \
                --namespace $POD_NAMESPACE \
                jupyterhub-certs \
                --from-file=certipy.json \
                --from-file=services-ca/services-ca.key \
                --from-file=services-ca/services-ca.crt \
                --from-file=notebooks-ca/notebooks-ca.key \
                --from-file=notebooks-ca/notebooks-ca.crt \
                --from-file=proxy-api-ca/proxy-api-ca.key \
                --from-file=proxy-api-ca/proxy-api-ca.crt \
                --from-file=proxy-client-ca/proxy-client-ca.key \
                --from-file=proxy-client-ca/proxy-client-ca.crt \
                --from-file=hub-ca/hub-ca.key \
                --from-file=hub-ca/hub-ca.crt \
                --from-file=hub-ca_trust.crt \
                --from-file=proxy-api-ca_trust.crt \
                --from-file=proxy-client-ca_trust.crt \
                --from-file=notebooks-ca_trust.crt \
                --from-file=services-ca_trust.crt \
                --from-file=hub-internal/hub-internal.key \
                --from-file=hub-internal/hub-internal.crt \
                --from-file=proxy-api/proxy-api.key \
                --from-file=proxy-api/proxy-api.crt \
                --from-file=proxy-client/proxy-client.key \
                --from-file=proxy-client/proxy-client.crt || true
          env:
            {{- include "jupyterhub.hub.env" . | nindent 12 }}
          volumeMounts:
            {{- include "jupyterhub.hub.volumeMounts" . | nindent 12 }}
          resources:
            requests:
              memory: 256Mi
              cpu: 200m
            limits:
              memory: 256Mi
              cpu: 200m
        {{- end }}
        {{- if .Values.hub.initContainers  }}
        {{- .Values.hub.initContainers | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        {{- if .Values.hub.extraContainers }}
        {{- .Values.hub.extraContainers | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
        - name: hub
          image: {{ .Values.hub.image.name }}:{{ .Values.hub.image.tag }}
          command:
            - jupyterhub
            - --config
            - /etc/jupyterhub/jupyterhub_config.py
            {{- if .Values.debug.enabled }}
            - --debug
            {{- end }}
            {{- /*
            We want to do automatic upgrades for sqlite-pvc by default, but
            allow users to opt out of that if they want. Users using their own
            db need to 'opt in' Go Templates treat nil and "" and false as
            'false', making this code complex. We can probably make this a
            one-liner, but doing combinations of boolean vars in go templates is
            very inelegant & hard to reason about.
            */}}
            {{- $upgradeType := typeOf .Values.hub.db.upgrade }}
            {{- if eq $upgradeType "bool" }}
            {{- /* .Values.hub.db.upgrade has been explicitly set to true or false */}}
            {{- if .Values.hub.db.upgrade }}
            - --upgrade-db
            {{- end }}
            {{- else if eq $upgradeType "<nil>" }}
            {{- /* .Values.hub.db.upgrade is nil */}}
            {{- if eq .Values.hub.db.type "sqlite-pvc" }}
            - --upgrade-db
            {{- end }}
            {{- end }}
          env:
            {{- include "jupyterhub.hub.env" . | nindent 12 }}
          volumeMounts:
            {{- include "jupyterhub.hub.volumeMounts" . | nindent 12 }}
          resources:
            {{- .Values.hub.resources | toYaml | trimSuffix "\n" | nindent 12 }}
          {{- with .Values.hub.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          {{- /* Below is deprecation logic of .Values.hub.uid */}}
          {{- if .Values.hub.containerSecurityContext }}
          {{- $securityContext := dict }}
          {{- if hasKey .Values.hub "uid" }}
          {{- $_ := merge $securityContext (dict "runAsUser" .Values.hub.uid) }}
          {{- end }}
          {{- $_ := merge $securityContext .Values.hub.containerSecurityContext }}
          securityContext:
            {{- $securityContext | toYaml | trimSuffix "\n" | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8081
          {{- if .Values.hub.livenessProbe.enabled }}
          # livenessProbe notes:
          # We don't know how long hub database upgrades could take
          # so having a liveness probe could be a bit risky unless we put
          # a initialDelaySeconds value with long enough margin for that
          # to not be an issue. If it is too short, we could end up aborting
          # database upgrades midway or ending up in an infinite restart
          # loop.
          livenessProbe:
            initialDelaySeconds: {{ .Values.hub.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.hub.livenessProbe.periodSeconds }}
            tcpSocket:
              port: http
          {{- end }}
          {{- if .Values.hub.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.hub.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.hub.readinessProbe.periodSeconds }}
            tcpSocket:
              port: http
          {{- end }}
